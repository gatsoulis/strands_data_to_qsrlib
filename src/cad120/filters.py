#!/usr/bin/env python
"""
Filters for smoothing tracks.
See https://msdn.microsoft.com/en-us/library/jj131429.aspx

@author: Yiannis Gatsoulis
@email: y.gatsoulis@leeds.ac.uk
"""

from __future__ import print_function
import sys
import numpy as np
import matplotlib.pyplot as plt

def euclidean(p1, p2):
    return np.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)


def median_filter(data, n=1):
    if len(data) < 2*n+1:
        return None

    ret = data[0:n]
    for i in range(n, len(data)):
        window = data[i-n: i+n]
        window_x = [p[0] for p in window]
        window_y = [p[1] for p in window]
        ret.append((int(np.median(window_x)), int(np.median(window_y))))

    return ret


def threshold_filter(data, thres):
    if len(data) < 2:
        return None

    ret = [data[0]]
    p1 = ret[0]
    # dists_inc = []
    for p2 in data[1:]:
        d = euclidean(p1, p2)
        if d < thres:
            ret.append(p1)
        else:
            ret.append(p2)
        p1 = ret[-1]
        # dists_inc.append(d)

    # print(len(ret) == len(data))
    # print(dists_inc)
    return ret


if __name__ == '__main__':
    data = [(259, 322), (259, 322), (260, 321), (259, 321), (260, 321), (260, 322), (260, 321), (259, 321), (260, 321), (259, 320), (258, 320), (257, 319), (256, 320), (255, 319), (255, 319), (255, 319), (256, 319), (256, 318), (257, 319), (257, 318), (257, 318), (257, 319), (259, 318), (261, 317), (263, 315), (265, 315), (267, 315), (269, 315), (271, 313), (274, 312), (277, 312), (280, 312), (282, 313), (289, 311), (293, 302), (296, 294), (298, 289), (300, 287), (301, 287), (303, 286), (306, 285), (309, 285), (313, 283), (315, 282), (320, 280), (323, 277), (327, 276), (330, 276), (334, 276), (339, 276), (345, 277), (350, 275), (356, 275), (363, 277), (370, 280), (376, 280), (383, 281), (390, 284), (397, 287), (402, 289), (408, 292), (412, 295), (416, 299), (418, 302), (420, 305), (420, 306), (421, 308), (423, 311), (424, 314), (425, 317), (426, 318), (427, 319), (427, 320), (428, 321), (428, 322), (428, 322), (429, 322), (429, 322), (429, 322), (429, 323), (429, 323), (428, 324), (428, 324), (428, 324), (428, 325), (428, 325), (428, 324), (429, 324), (428, 325), (428, 325), (426, 325), (426, 326), (425, 325), (425, 326), (424, 326), (425, 326), (425, 326), (425, 325), (425, 324), (425, 324), (424, 324), (416, 326), (411, 324), (410, 322), (412, 320), (411, 319), (410, 318), (409, 317), (408, 316), (408, 314), (408, 312), (409, 310), (410, 307), (410, 304), (411, 301), (411, 298), (411, 295), (411, 293), (412, 289), (412, 287), (413, 283), (413, 280), (412, 275), (413, 271), (413, 267), (413, 262), (413, 258), (417, 248), (416, 233), (417, 227), (414, 219), (415, 215), (409, 206), (411, 205), (396, 192), (404, 194), (394, 178), (394, 170), (398, 175), (418, 173), (426, 175), (423, 174), (419, 174), (415, 174), (413, 175), (411, 175), (408, 175), (406, 175), (402, 174), (398, 173), (396, 172), (393, 170), (390, 169), (386, 168), (384, 138), (386, 121), (387, 106), (388, 100), (388, 93), (385, 90), (385, 89), (383, 84), (382, 82), (381, 78), (379, 73), (377, 70), (372, 66), (368, 63), (364, 61), (361, 56), (354, 52), (349, 48), (344, 44), (341, 40), (338, 36), (339, 26), (340, 20), (328, 24), (322, 27), (308, 36), (340, 83), (354, 128), (356, 168), (351, 200), (342, 226), (332, 246), (322, 262), (314, 274), (305, 283), (298, 290), (291, 295), (284, 300), (278, 304), (273, 306), (268, 309), (264, 311), (260, 312), (257, 313), (254, 313), (251, 314), (250, 315), (248, 316), (247, 315), (245, 315), (243, 315), (243, 313), (243, 313), (242, 314), (242, 312), (241, 311), (240, 311), (240, 310), (240, 310), (240, 310), (240, 310), (239, 309), (239, 310), (239, 310), (239, 311), (239, 311), (239, 311), (239, 312), (239, 311), (239, 311), (239, 310), (240, 311), (240, 311), (240, 310), (240, 311), (240, 311), (241, 312), (241, 311), (240, 310), (240, 309), (240, 310), (240, 310), (240, 310), (241, 310), (242, 311), (242, 310), (243, 311), (243, 311), (243, 310), (243, 309), (243, 308), (243, 308), (243, 309), (243, 309), (244, 309), (244, 309), (244, 309), (244, 309), (243, 311), (243, 311), (243, 310), (243, 309), (244, 310), (244, 309), (245, 310), (245, 310), (245, 309), (245, 309), (245, 310), (245, 311), (244, 313), (244, 312), (244, 312), (243, 312), (242, 311), (241, 310), (240, 309), (239, 309), (238, 309), (238, 308), (237, 308), (236, 309), (235, 309), (234, 309), (233, 308), (232, 309), (232, 307), (231, 308), (230, 307), (228, 306), (228, 305), (227, 305), (227, 304), (228, 303), (228, 303), (229, 301), (230, 302), (231, 304), (233, 306), (234, 307), (235, 308), (319, 263), (353, 197), (364, 149), (362, 115), (356, 95), (350, 85), (331, 67), (331, 73), (331, 81), (331, 88), (332, 94), (332, 102), (332, 111), (332, 119), (332, 125), (332, 132), (332, 141), (331, 146), (331, 153), (332, 160), (331, 167), (331, 173), (331, 180), (331, 184), (333, 191), (335, 197), (337, 203), (338, 208), (339, 213), (340, 217), (343, 221), (345, 225), (345, 228), (347, 233), (350, 237), (352, 240), (353, 244), (355, 249), (357, 253), (359, 258), (359, 263), (360, 265), (359, 269), (358, 271), (355, 274), (354, 275), (351, 278), (351, 285), (349, 286), (349, 295), (346, 295), (343, 293), (346, 306), (346, 314), (349, 321), (349, 324), (350, 325), (351, 326), (352, 326), (348, 315), (344, 319), (340, 321), (337, 323), (334, 324), (331, 326), (329, 327), (328, 330)]
    # data = data[0:12]
    # plt.scatter(*zip(*data), color="blue")

    # data_filtered = median_filter(data, 2)
    # plt.scatter(*zip(*data_filtered), color="red")

    data_filtered = threshold_filter(data, 3)
    data_filtered = median_filter(data_filtered, 2)
    plt.scatter(*zip(*data_filtered), color="red")

    dists = [euclidean(p1, p2) for p1, p2 in zip(data_filtered[1:], data_filtered)]
    dists = sorted(dists, reverse=True)
    print(dists)
    print(max(dists), np.mean(dists), np.median(dists))

    # data_filtered = threshold_filter(data_filtered, np.mean(dists))
    data_filtered = threshold_filter(data_filtered, 21.)
    plt.scatter(*zip(*data_filtered), color="blue")

    plt.show()
